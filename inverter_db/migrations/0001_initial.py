# Generated by Django 5.1.1 on 2024-10-25 12:09

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InverterAccumulatedData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('accumulated_charger_power', models.FloatField()),
                ('accumulated_discharger_power', models.FloatField()),
                ('accumulated_buy_power', models.FloatField()),
                ('accumulated_sell_power', models.FloatField()),
                ('accumulated_load_power', models.FloatField()),
                ('accumulated_self_use_power', models.FloatField()),
                ('accumulated_pv_sell_power', models.FloatField()),
                ('accumulated_grid_charger_power', models.FloatField()),
                ('accumulated_pv_power', models.FloatField()),
                ('accumulated_day', models.IntegerField()),
                ('accumulated_hour', models.IntegerField()),
                ('accumulated_minute', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Inverter Accumulated Data',
                'verbose_name_plural': 'Inverter Accumulated History',
            },
        ),
        migrations.CreateModel(
            name='InverterBaseConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_voltage_grade', models.FloatField()),
                ('rated_power_va', models.FloatField()),
                ('batt_voltage_grade', models.FloatField()),
                ('rated_power_w', models.FloatField()),
                ('battvol_grade', models.FloatField()),
                ('rated_current_a', models.FloatField()),
            ],
            options={
                'verbose_name': 'Inverter Base Config',
                'verbose_name_plural': 'Inverter Base Config History',
            },
        ),
        migrations.CreateModel(
            name='InverterData',
            fields=[
                ('timestamp', models.DateTimeField(primary_key=True, serialize=False)),
                ('battery_voltage', models.FloatField()),
                ('inverter_voltage', models.FloatField()),
                ('grid_voltage', models.FloatField()),
                ('bus_voltage', models.FloatField()),
                ('control_current', models.FloatField()),
                ('inverter_current', models.FloatField()),
                ('grid_current', models.FloatField()),
                ('load_current', models.FloatField()),
                ('p_inverter', models.FloatField()),
                ('p_grid', models.FloatField()),
                ('p_load', models.FloatField()),
                ('load_percent', models.FloatField()),
                ('s_inverter', models.FloatField()),
                ('s_grid', models.FloatField()),
                ('s_load', models.FloatField()),
                ('q_inverter', models.FloatField()),
                ('q_grid', models.FloatField()),
                ('q_load', models.FloatField()),
                ('inverter_frequency', models.FloatField()),
                ('grid_frequency', models.FloatField()),
                ('ac_radiator_temperature', models.FloatField()),
                ('transformer_temperature', models.FloatField()),
                ('dc_radiator_temperature', models.FloatField()),
                ('pv_voltage', models.FloatField()),
                ('charger_current', models.FloatField()),
                ('charger_power', models.FloatField()),
            ],
            options={
                'verbose_name': 'Inverter Current Data',
                'verbose_name_plural': 'Inverter Current Data History',
            },
        ),
        migrations.CreateModel(
            name='InverterErrors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('error_message_1', models.TextField(blank=True, null=True)),
                ('error_message_2', models.TextField(blank=True, null=True)),
                ('error_message_3', models.TextField(blank=True, null=True)),
                ('warning_message_1', models.TextField(blank=True, null=True)),
                ('warning_message_2', models.TextField(blank=True, null=True)),
                ('charger_error_message', models.TextField(blank=True, null=True)),
                ('charger_warning_message', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Inverter Current Errors',
                'verbose_name_plural': 'Inverter Errors History',
            },
        ),
        migrations.CreateModel(
            name='InverterParamState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('work_state', models.CharField(max_length=50)),
                ('inverter_relay_state', models.CharField(max_length=50)),
                ('grid_relay_state', models.CharField(max_length=50)),
                ('load_relay_state', models.CharField(max_length=50)),
                ('n_line_relay_state', models.CharField(max_length=50)),
                ('dc_relay_state', models.CharField(max_length=50)),
                ('earth_relay_state', models.CharField(max_length=50)),
                ('charger_work_state', models.CharField(max_length=50)),
                ('mppt_state', models.CharField(max_length=50)),
                ('charging_state', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Inverter Current Systems State',
                'verbose_name_plural': 'Inverter Current Systems State History',
            },
        ),
    ]
